import px

bytes_per_gb = 1024 * 1024 * 1024

# Adjust these values based on your cloud provider's pricing.
egress_cost_per_gib = 0.012


def hourly_egress_by_pod():
    # Load the last 1 hr of Pixie's 'conn_stats' table into a Dataframe.
    # The 'conn_stats' table contains contains statistics on the communications
    # made between client-server pairs.
    df = px.DataFrame(table='conn_stats', start_time="-1h")

    # Add K8s context using the table record's UPID.
    df.service = df.ctx['service']

    # Filter for egress traffic only:
    # trace-role of 1 means client-side tracing. Pixie only
    # traces on the client-side when traffic is leaving the cluster.
    df = df[df.trace_role == 1]
    # Filter out any client-side tracing to known pods.
    df.remote_pod_id = px.ip_to_pod_id(df.remote_addr)
    df.remote_service_id = px.ip_to_service_id(df.remote_addr)
    df = df[df.remote_pod_id == '' and df.remote_service_id == '']
    # Filter out localhost.
    df = df[not df.remote_addr == '127.0.0.1']
    df = df[not df.remote_addr == '0.0.0.0']

    # Calculate network usage for each service.
    df = df.groupby('service').agg(
        # The fields below are counters per UPID, so we take the min
        # (starting value) and the max (ending value) to subtract them.
        bytes_sent_min=('bytes_sent', px.min),
        bytes_sent_max=('bytes_sent', px.max),
    )

    # Calculate bytes transferred over the time window.
    df.bytes_sent = df.bytes_sent_max - df.bytes_sent_min

    # Sum network traffic by service.
    df = df.groupby('service').agg(
        bytes_sent=('bytes_sent', px.sum),
    )
    df.gb_egress = df.bytes_sent / bytes_per_gb
    return df


def yearly_egress_cost_by_service():
    df = hourly_egress_by_pod()
    # Estimate yearly usage based on last hour of usage.
    df.network_cost_per_year = df.gb_egress * 24 * 365 * egress_cost_per_gib
    return df[['service', 'network_cost_per_year']]


def yearly_egress_cost():
    df = yearly_egress_cost_by_service()
    # Calcualte yearly network cost across all services.
    return df.agg(
       network_cost_per_year=('network_cost_per_year', px.sum)
    )


df = yearly_egress_cost_by_service()
px.display(df, 'Estimated Network Cost By Service (Yearly)')

df = yearly_egress_cost()
px.display(df, 'Estimated Network Cost (Yearly)')
