{"version":3,"sources":["utils/useData.js","Filter.js","Table.js","App.js","reportWebVitals.js","index.js","Table.module.css","Filter.module.css"],"names":["randomFrom","array","Math","floor","random","length","sillyWord","word","includes","genericHeaders","genericDataFuncs","ceil","substring","Filter","onChange","React","value","setValue","onChangeWrapper","event","v","target","trim","className","styles","type","placeholder","Table","data","columns","reactTable","useTable","useGlobalFilter","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setGlobalFilter","map","group","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","App","numRows","numCols","Array","fill","_","h","Header","accessor","c","useData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.0c402462.chunk.js","sourcesContent":["import * as React from 'react';\n\nfunction randomFrom(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\n/** Make a silly word that rhymes with Goomba (the Mario mushroom enemies) */\nfunction sillyWord() {\n  const leadConsonants = ['B', 'D', 'F', 'G', 'L', 'T', 'V', 'Z'];\n  const middles = ['oom', 'oon', 'um', 'un'];\n  const midConsonants = ['b', 'd']\n  const ends = ['a', 'ah', 'u', 'uh', 'o'];\n\n  const word = randomFrom(leadConsonants) + randomFrom(middles) + randomFrom(midConsonants) + randomFrom(ends);\n\n  // Try again if we accidentally picked something offensive\n  if (['Goombah'].includes(word)) return sillyWord();\n  else return word;\n}\n\nfunction sillyName() {\n  return `${sillyWord()} ${sillyWord().substring(0, 3)}`;\n}\n\nconst genericHeaders = ['ID', 'Name', 'Friend', 'Score', 'Temperament'];\nconst genericDataFuncs = [\n  () => Math.ceil(Math.random() * 100),\n  sillyName,\n  sillyWord,\n  () => Math.floor(Math.random() * 10_000) / 100,\n  () => randomFrom(['Goofy', 'Wacky', 'Silly', 'Funny', 'Serious']),\n];\n\n// react-table expects memoized columns and data, so we export a React hook to permit doing that.\nexport default function useData(numRows = 20, numCols = 5) {\n  const columns = React.useMemo(() => (\n    Array(numCols).fill(0).map((_, h) => {\n      const name = genericHeaders[h % genericHeaders.length];\n      const id = `col${h}`;\n      return {\n        Header: name,\n        accessor: id\n      };\n    })\n  ), [numCols]);\n\n  const data = React.useMemo(() => (\n    Array(numRows).fill(0).map(() => {\n      const row = {};\n      for (let c = 0; c < numCols; c++) {\n        row[`col${c}`] = genericDataFuncs[c % genericDataFuncs.length]();\n      }\n      return row;\n    })\n  ), [numRows, numCols]);\n\n  return { columns, data };\n}","import * as React from 'react';\n\nimport styles from './Filter.module.css';\n\nexport default function Filter({ onChange }) {\n  const [value, setValue] = React.useState('');\n\n  const onChangeWrapper = React.useCallback((event) => {\n    const v = event.target.value.trim();\n    setValue(v);\n    onChange(v);\n  }, [onChange]);\n\n  return (\n    <div className={styles.Filter}>\n      <input type=\"text\" value={value} placeholder='Search rows...' onChange={onChangeWrapper} />\n    </div>\n  );\n}","import * as React from 'react';\n\nimport styles from './Table.module.css'\nimport Filter from './Filter.js';\nimport { useTable, useGlobalFilter, useSortBy } from 'react-table';\n\nexport default function Table({ data: { columns, data } }) {\n  const reactTable = useTable({\n      columns,\n      data\n    },\n    useGlobalFilter,\n    useSortBy\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setGlobalFilter\n  } = reactTable;\n\n  return (\n    <>\n      <Filter onChange={setGlobalFilter} />\n      <table {...getTableProps()} className={styles.Table}>\n        <thead>\n          {headerGroups.map(group => (\n            <tr {...group.getHeaderGroupProps()}>\n              {group.headers.map(column => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render('Header')}\n                  <span>\n                    {column.isSorted ? (\n                      column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼'\n                    ): ''}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => (\n                  <td {...cell.getCellProps()}>\n                    {cell.render('Cell')}\n                  </td>\n                ))}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n}","import useData from './utils/useData.js';\nimport Table from './Table.js';\n\nimport './App.css';\n\nfunction App() {\n  const data = useData();\n  return (\n    <div className=\"App\">\n      <main>\n        <Table data={data} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Table\":\"Table_Table__gTzsf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter\":\"Filter_Filter__3qIm_\"};"],"sourceRoot":""}