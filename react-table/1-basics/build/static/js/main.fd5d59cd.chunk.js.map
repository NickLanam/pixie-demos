{"version":3,"sources":["Table.module.css","utils/useData.js","Table.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","randomFrom","array","Math","floor","random","length","sillyWord","word","includes","sillyName","substring","Table","data","headers","rows","className","styles","map","h","row","cell","App","numRows","numCols","genFuncs","ceil","Array","fill","_","c","useData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,MAAQ,uB,sHCD1B,SAASC,EAAWC,GAClB,OAAOA,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,SAIhD,SAASC,IACP,IAKMC,EAAOP,EALU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAKjBA,EAJ1B,CAAC,MAAO,MAAO,KAAM,OAI2BA,EAH1C,CAAC,IAAK,MAGgEA,EAF/E,CAAC,IAAK,KAAM,IAAK,KAAM,MAKpC,MAAI,CAAC,WAAWQ,SAASD,GAAcD,IAC3BC,EAGd,SAASE,IACP,MAAM,GAAN,OAAUH,IAAV,YAAyBA,IAAYI,UAAU,EAAG,I,2BCjBrC,SAASC,EAAT,GAA6C,IAAD,IAA3BC,KAAQC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,KAC/C,OACE,wBAAOC,UAAWC,IAAOL,MAAzB,UACE,gCACGE,EAAQI,KAAI,SAAAC,GAAC,OAAI,6BAAKA,SAEzB,gCACGJ,EAAKG,KAAI,SAACE,GAAD,OACR,6BACGA,EAAIF,KAAI,SAAAG,GAAI,OAAI,6BAAKA,iB,MCKnBC,MAXf,WACE,IAAMT,EFgBO,WAA6C,IAA5BU,EAA2B,uDAAjB,GAAIC,EAAa,uDAAH,EAChDV,EAAU,CAAC,KAAM,OAAQ,SAAU,QAAS,eAC5CW,EAAW,CACf,kBAAMtB,KAAKuB,KAAqB,IAAhBvB,KAAKE,WACrBK,EACAH,EACA,kBAAMJ,KAAKC,MAAsB,IAAhBD,KAAKE,UAAqB,KAC3C,kBAAMJ,EAAW,CAAC,QAAS,QAAS,QAAS,QAAS,cAExD,MAAO,CACLa,QAASa,MAAMH,GAASI,KAAK,GAAGV,KAAI,SAACW,EAAGV,GAAJ,OAAUL,EAAQK,EAAIL,EAAQR,WAClES,KAAMY,MAAMJ,GAASK,KAAK,GAAGV,KAC3B,kBAAMS,MAAMH,GAASI,KAAK,GAAGV,KAC3B,SAACW,EAAGC,GAAJ,OAAUL,EAASK,EAAIL,EAASnB,iBE7BzByB,GACb,OACE,qBAAKf,UAAU,MAAf,SACE,+BACE,cAACJ,EAAD,CAAOC,KAAMA,SCENmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fd5d59cd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Table\":\"Table_Table__gTzsf\"};","function randomFrom(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\n/** Make a silly word that rhymes with Goomba (the Mario mushroom enemies) */\nfunction sillyWord() {\n  const leadConsonants = ['B', 'D', 'F', 'G', 'L', 'T', 'V', 'Z'];\n  const middles = ['oom', 'oon', 'um', 'un'];\n  const midConsonants = ['b', 'd']\n  const ends = ['a', 'ah', 'u', 'uh', 'o'];\n\n  const word = randomFrom(leadConsonants) + randomFrom(middles) + randomFrom(midConsonants) + randomFrom(ends);\n\n  // Try again if we accidentally picked something offensive\n  if (['Goombah'].includes(word)) return sillyWord();\n  else return word;\n}\n\nfunction sillyName() {\n  return `${sillyWord()} ${sillyWord().substring(0, 3)}`;\n}\n\nexport default function useData(numRows = 20, numCols = 5) {\n  const headers = ['ID', 'Name', 'Friend', 'Score', 'Temperament'];\n  const genFuncs = [\n    () => Math.ceil(Math.random() * 100),\n    sillyName,\n    sillyWord,\n    () => Math.floor(Math.random() * 10_000) / 100,\n    () => randomFrom(['Goofy', 'Wacky', 'Silly', 'Funny', 'Serious']),\n  ];\n  return {\n    headers: Array(numCols).fill(0).map((_, h) => headers[h % headers.length]),\n    rows: Array(numRows).fill(0).map(\n      () => Array(numCols).fill(0).map(\n        (_, c) => genFuncs[c % genFuncs.length]()\n      )\n    ),\n  };\n}","import styles from './Table.module.css'\n\nexport default function Table({ data: { headers, rows } }) {\n  return (\n    <table className={styles.Table}>\n      <thead>\n        {headers.map(h => <th>{h}</th>)}\n      </thead>\n      <tbody>\n        {rows.map((row) => (\n          <tr>\n            {row.map(cell => <td>{cell}</td>)}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}","import useData from './utils/useData.js';\nimport Table from './Table.js';\n\nimport './App.css';\n\nfunction App() {\n  const data = useData();\n  return (\n    <div className=\"App\">\n      <main>\n        <Table data={data} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}